AWSTemplateFormatVersion: '2010-09-09'
Description: <
  CloudFormation stack for Jenkins on ECS
  Allows Jenkins access to ECS Docker daemon

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          Default: 'Network'
        Parameters:
          - VPC
          - VPCCIDR
          - PublicSubnet1
          - PublicSubnet2
          - PrivateSubnet1
          - PrivateSubnet2
          - AllowedIPRange
      - Label:
          Default: 'Launch Configuration'
        Parameters:
          - InstanceType
          - InstanceAMI
          - SystemsManagerAccess
      - Label:
          Default: 'Auto Scaling Group'
        Parameters:
          - MinSize
          - MaxSize
      - Label:
          Default: 'ECS Cluster'
        Parameters:
          - ClusterName
          - JenkinsControllerRepositoryUri
          - JenkinsControllerRepositoryArn
      - Label:
          Default: 'Jenkins Controller'
        Parameters:
          - AdminUsername
          - AdminPassword
          - ControllerServiceName
          - PrivateNamespaceName

Parameters:
  VPC:
    Description: 'VPC id'
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    Description: 'IP range of the VPC'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '10.10.0.0/16'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: 'must be a valid IP CIDR range of the form x.x.x.x/x.'
  PublicSubnet1:
    Description: 'Public Subnet id'
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Description: 'Public Subnet id'
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1:
    Description: 'Private Subnet id'
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: 'Private Subnet id'
    Type: AWS::EC2::Subnet::Id
    Default: false
  SystemsManagerAccess:
    Description: 'Enable Systems Manager access'
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  AllowedIPRange:
    Description: 'The public IP address range that can be used to connect to the instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: 'must be a valid IP CIDR range of the form x.x.x.x/x.'
  InstanceType:
    Description: 'EC2 instance type'
    Type: String
    Default: 't2.micro'
    AllowedValues:
      - 't2.micro'
      - 't2.small'
      - 't2.medium'
  InstanceAMI:
    Description: 'EC2 AMI ID'
    Type: 'AWS::EC2::Image::Id'
    ConstraintDescription: 'Must be a valid EC2 instance type.'
  ClusterName:
    Description: 'Name of the cluster'
    Type: String
    Default: 'jenkins-cluster'
  MinSize:
    Description: 'Minimum number of ECS container instances'
    Type: String
    Default: '2'
  MaxSize:
    Description: 'Maximum number of ECS container instances'
    Type: String
    Default: '3'
  JenkinsControllerRepositoryUri:
    Description: 'Jenkins controller ECR image URI'
    Type: String
  JenkinsControllerRepositoryArn:
    Description: 'Jenkins controller ECR repository ARN'
    Type: String
  AdminUsername:
    Description: 'Jenkins Admin Username'
    Type: String
  AdminPassword:
    Description: 'Jenkins Admin Password'
    Type: String
  ControllerServiceName:
    Description: 'DNS name of controller service'
    Type: String
    Default: 'jenkins'
  PrivateNamespaceName:
    Description: 'Private DNS namespace name'
    Type: String
    Default: 'jenkins-on-ecs.dev'

Conditions:
  HasSystemsManager: !Equals
    - true
    - !Ref SystemsManagerAccess

Resources:
  ContainerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  EC2SystemsManagerAccessPolicy:
    Type: AWS::IAM::Policy
    Condition: HasSystemsManager
    Properties:
      PolicyName: 'ssm-access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'ssmmessages:*'
              - 'ssm:UpdateInstanceInformation'
              - 'ec2messages:*'
            Resource: '*'
      Roles:
        - !Ref ContainerInstanceRole

  JenkinsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: jenkins-task-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        # Policy for Jenkins amazon-ecs plugin
        - PolicyName: create-jenkins-agents
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ecs:RegisterTaskDefinition
                  - ecs:ListClusters
                  - ecs:DescribeContainerInstances
                  - ecs:ListTaskDefinitions
                  - ecs:DescribeTaskDefinition
                  - ecs:DeregisterTaskDefinition
                Effect: Allow
                Resource: '*'
              - Action:
                  - ecs:ListContainerInstances
                Effect: Allow
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}
              - Action:
                  - ecs:RunTask
                Effect: Allow
                Condition:
                  ArnEquals:
                    ecs:cluster:
                      - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*
              - Action:
                  - ecs:StopTask
                Effect: Allow
                Condition:
                  ArnEquals:
                    ecs:cluster:
                      - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
              - Action:
                  - ecs:DescribeTasks
                Effect: Allow
                Condition:
                  ArnEquals:
                    ecs:cluster:
                      - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
              - Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                Effect: Allow
                Resource: !Ref JenkinsControllerRepositoryArn
              - Action:
                  - ecr:GetAuthorizationToken
                Effect: Allow
                Resource: '*'

  JenkinsECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref ContainerInstanceRole

  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for Jenkins'
      VpcId: !Ref VPC

  JenkinsLoadBalancerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: 'tcp'
      FromPort: 8080
      ToPort: 8080
      GroupId: !Ref JenkinsSecurityGroup
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  JenkinsURLSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: 'tcp'
      FromPort: 8080
      ToPort: 8080
      GroupId: !Ref JenkinsSecurityGroup
      SourceSecurityGroupId: !Ref JenkinsSecurityGroup

  JenkinsTunnelSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: 'tcp'
      FromPort: 50000
      ToPort: 50000
      GroupId: !Ref JenkinsSecurityGroup
      SourceSecurityGroupId: !Ref JenkinsSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for ELB'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedIPRange
      SecurityGroupEgress:
        - IpProtocol: 'tcp'
          FromPort: 8080
          ToPort: 8080
          DestinationSecurityGroupId: !Ref JenkinsSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for EFS mount target'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref VPCCIDR

  JenkinsEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: JenkinsEFS

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsEFS
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsEFS
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: 'jenkins-elb'
      Scheme: 'internet-facing'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: 'HTTP'
      Port: 80
      DefaultActions:
        - Type: 'forward'
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref JenkinsTargetGroup

  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /login
      HealthCheckTimeoutSeconds: 60
      HealthCheckIntervalSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Name: JenkinsTargetGroup
      TargetType: ip
      Protocol: HTTP
      Port: 8080
      VpcId: !Ref VPC

  JenkinsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  JenkinsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'jenkins-master'
      NetworkMode: 'awsvpc'
      TaskRoleArn: !Ref JenkinsTaskRole
      RequiresCompatibilities:
        - 'EC2'
      ContainerDefinitions:
        - Name: 'jenkins-master'
          Image: !Ref JenkinsControllerRepositoryUri
          MountPoints:
            - SourceVolume: 'data-volume'
              ContainerPath: '/var/jenkins_home'
            - SourceVolume: 'docker-volume'
              ContainerPath: '/var/run/docker.sock'
            - SourceVolume: 'docker-client'
              ContainerPath: '/usr/bin/docker'
          Environment:
            - Name: JENKINS_ADMIN_ID
              Value: !Ref AdminUsername
            - Name: JENKINS_ADMIN_PASSWORD
              Value: !Ref AdminPassword
            - Name: CLUSTER_ARN
              Value: !GetAtt JenkinsCluster.Arn
            - Name: CLUSTER_REGION
              Value: !Ref "AWS::Region"
            - Name: JENKINS_TUNNEL_IP
              Value: !Sub "${ControllerServiceName}.${PrivateNamespaceName}"
            - Name: JENKINS_TUNNEL_PORT
              Value: "50000"
            - Name: JENKINS_SERVER_PORT
              Value: "8080"
            - Name: EXECUTION_ROLE_ARN
              Value: ""
            # - Name: AGENT_LOG_GROUP
            #   Value: ""
            - Name: AGENT_LABEL
              Value: "ecs-cloud-agent"
          Essential: true
          Cpu: 400
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 50000
      Volumes:
        - Host:
            SourcePath: '/data/'
          Name: 'data-volume'
        - Host:
            SourcePath: '/var/run/docker.sock'
          Name: 'docker-volume'
        - Host:
            SourcePath: '/usr/bin/docker'
          Name: 'docker-client'

  # Requires the AWSServiceRoleForECS service-linked role
  JenkinsECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ClusterName
      DesiredCount: 1
      ServiceName: !Ref ControllerServiceName
      LaunchType: 'EC2'
      TaskDefinition: !Ref JenkinsTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref JenkinsTargetGroup
          ContainerPort: 8080
          ContainerName: 'jenkins-master'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref JenkinsSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn
          ContainerName: 'jenkins-master'
          ContainerPort: 8080

  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref PrivateNamespaceName
      Vpc: !Ref VPC

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery service for Jenkins Master
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Ref ControllerServiceName
      NamespaceId: !Ref PrivateNamespace

  JenkinsECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref InstanceAMI
      IamInstanceProfile: !Ref JenkinsECSInstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref JenkinsSecurityGroup
      BlockDeviceMappings:
        - DeviceName: '/dev/xvdcz'
          Ebs:
            VolumeSize: 24
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          #Run SSM Agent
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent

          #Mount EFS volume
          yum install -y nfs-utils
          EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
          EC2_REGION=${AWS::Region}
          EFS_FILE_SYSTEM_ID=${JenkinsEFS}
          EFS_PATH=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com
          mkdir /data
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_PATH:// /data

          #Give ownership to jenkins user
          chown 1000 /data
          echo 'ECS_CLUSTER=${ClusterName}' >> /etc/ecs/ecs.config
          chmod 777 /var/run/docker.sock
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource JenkinsECSAutoScaling

  JenkinsECSAutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref JenkinsECSLaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref MinSize
      HealthCheckType: 'EC2'
      HealthCheckGracePeriod: 240
      Tags:
        - Key: Name
          Value: 'jenkins-ecs-instance'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref MinSize
        Timeout: PT15M

  JenkinsClusterScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: 'ChangeInCapacity'
      AutoScalingGroupName: !Ref JenkinsECSAutoScaling
      EstimatedInstanceWarmup: 60
      MetricAggregationType: 'Average'
      PolicyType: 'StepScaling'
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 2

  JenkinsClusterScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'CPU utilization peaked at 70% during the last minute'
      AlarmName: 'JenkinsClusterScaleUpAlarm'
      AlarmActions:
        - !Ref JenkinsClusterScaleUpPolicy
      Dimensions:
        - Name: ClusterName
          Value: 'jenkins-cluster'
      MetricName: 'CPUReservation'
      Namespace: 'AWS/ECS'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      Statistic: 'Maximum'
      Threshold: 70
      Period: 60
      EvaluationPeriods: 1
      TreatMissingData: 'notBreaching'

  JenkinsClusterScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: 'PercentChangeInCapacity'
      AutoScalingGroupName: !Ref JenkinsECSAutoScaling
      Cooldown: '120'
      ScalingAdjustment: -50

  JenkinsClusterScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'CPU utilization is under 50% for the last 10 min (change 10 min to 45 min for prod use as you pay by the hour)'
      AlarmName: 'JenkinsClusterScaleDownAlarm'
      AlarmActions:
        - !Ref JenkinsClusterScaleDownPolicy
      Dimensions:
        - Name: ClusterName
          Value: 'jenkins-cluster'
      MetricName: 'CPUReservation'
      Namespace: 'AWS/ECS'
      ComparisonOperator: 'LessThanThreshold'
      Statistic: 'Maximum'
      Threshold: 50
      Period: 600
      EvaluationPeriods: 1
      TreatMissingData: 'notBreaching'

Outputs:
  LoadBalancer:
    Description: 'Jenkins URL'
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt LoadBalancer.DNSName