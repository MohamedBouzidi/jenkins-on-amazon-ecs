AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create a custom jenkins image with configuration and plugins

Parameters:
  ConfigurationBucketARN:
    Type: String
    Description: Bucket containing configuration files
  InstanceAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Image for configuration instance
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  JenkinsControllerRepositoryName:
    Type: String
    Description: Jenkins Controller ECR repository name
  # SecurityGroupId:
  #   Type: AWS::EC2::SecurityGroup::Id
  #   Description: Security Group for configuration instance

Resources:

  JenkinsAgentTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: ["ecs-tasks.amazonaws.com"]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  SetupInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: ["ec2.amazonaws.com"]
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "ecr:GetAuthorizationToken"
                Resource: "*"
              - Effect: Allow
                Action: "*"
                Resource: !GetAtt JenkinsControllerRepository.Arn
              - Effect: Allow
                Action: "s3:ListBucket"
                Resource: !Ref ConfigurationBucketARN
              - Effect: Allow
                Action: "s3:GetObject"
                Resource: !Sub "${ConfigurationBucketARN}/*"

  SetupInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref SetupInstanceRole]

  SetupInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref InstanceAMI
      IamInstanceProfile: !Ref SetupInstanceProfile
      # KeyName: DefaultKeyPair
      # SecurityGroupIds:
      #   - !Ref SecurityGroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum install -y docker
          systemctl start docker

          aws ecr get-login-password --region ${AWS::Region} | \
          docker login --username AWS \
            --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com

          mkdir app && cd app

          aws s3 cp --recursive s3://mgt-jenkins-configuration/jenkins/controller .

          docker build -t jenkins:custom .
          docker tag jenkins:custom ${JenkinsControllerRepository.RepositoryUri}
          docker push ${JenkinsControllerRepository.RepositoryUri}

          # PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          # PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)

          # docker run -d --name jenkins --rm \
          # -p 0.0.0.0:8080:8080 -p 0.0.0.0:50000:50000 \
          # --env JENKINS_ADMIN_ID=admin \
          # --env JENKINS_ADMIN_PASSWORD=password \
          # --env CLUSTER_ARN="arn:aws:ecs:us-east-1:929264800569:cluster/test" \
          # --env CLUSTER_REGION=us-east-1 \
          # --env EXECUTION_ROLE_ARN="${JenkinsAgentTaskRole.Arn}" \
          # --env JENKINS_SERVER_IP="${!PUBLIC_IP}" \
          # --env JENKINS_SERVER_PORT=8080 \
          # --env JENKINS_TUNNEL_IP="${!PRIVATE_IP}" \
          # --env JENKINS_TUNNEL_PORT=50000 \
          # --env AGENT_LOG_GROUP=jenkins-ecs \
          # jenkins:custom

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \
            --resource SetupInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

  # JenkinsAgentsLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: jenkins-ecs

  JenkinsControllerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Ref JenkinsControllerRepositoryName

Outputs:
  JenkinsControllerRepositoryUri:
    Value: !GetAtt JenkinsControllerRepository.RepositoryUri
  JenkinsControllerRepositoryArn:
    Value: !GetAtt JenkinsControllerRepository.Arn